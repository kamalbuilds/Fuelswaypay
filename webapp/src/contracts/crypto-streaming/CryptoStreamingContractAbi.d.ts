/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.38.1
  Forc version: 0.35.5
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type InvalidErrorInput = Enum<{ CannotReinitialize: [], SenderIsNotOwner: [], StreamIsNotStart: [], StreamIsNotActive: [], IncorrectAssetId: ContractIdInput, StreamBalanceNotEnough: [], NotStreamRecipient: [], NotOwnerOrRecipient: [], NotAvaiableAmount: [], NotPermissionToCancel: [], NotPermissionToTransfer: [] }>;
export type InvalidErrorOutput = Enum<{ CannotReinitialize: [], SenderIsNotOwner: [], StreamIsNotStart: [], StreamIsNotActive: [], IncorrectAssetId: ContractIdOutput, StreamBalanceNotEnough: [], NotStreamRecipient: [], NotOwnerOrRecipient: [], NotAvaiableAmount: [], NotPermissionToCancel: [], NotPermissionToTransfer: [] }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ConfigInput = { start_date: BigNumberish, cancel_previlege: BigNumberish, transfer_previlege: BigNumberish, recipient: IdentityInput, unlock_number: BigNumberish, unlock_amount_each_time: BigNumberish, unlock_every: BigNumberish, prepaid: BigNumberish };
export type ConfigOutput = { start_date: BN, cancel_previlege: BN, transfer_previlege: BN, recipient: IdentityOutput, unlock_number: BN, unlock_amount_each_time: BN, unlock_every: BN, prepaid: BN };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;

interface CryptoStreamingContractAbiInterface extends Interface {
  functions: {
    cancel_stream: FunctionFragment;
    get_balance: FunctionFragment;
    get_stream_info: FunctionFragment;
    initialize: FunctionFragment;
    send_fund: FunctionFragment;
    transfer_stream: FunctionFragment;
    withdraw: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'cancel_stream', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_balance', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_stream_info', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: [ConfigInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'send_fund', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'transfer_stream', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: []): Uint8Array;

  decodeFunctionData(functionFragment: 'cancel_stream', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_stream_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'send_fund', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer_stream', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
}

export class CryptoStreamingContractAbi extends Contract {
  interface: CryptoStreamingContractAbiInterface;
  functions: {
    cancel_stream: InvokeFunction<[], void>;
    get_balance: InvokeFunction<[], BN>;
    get_stream_info: InvokeFunction<[], [ConfigOutput, BN, BN, BN, BN]>;
    initialize: InvokeFunction<[config: ConfigInput], void>;
    send_fund: InvokeFunction<[], void>;
    transfer_stream: InvokeFunction<[new_recipient: IdentityInput], void>;
    withdraw: InvokeFunction<[], void>;
  };
}
