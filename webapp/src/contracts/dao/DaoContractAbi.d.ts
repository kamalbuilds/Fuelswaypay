/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.38.1
  Forc version: 0.35.5
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type InvalidErrorInput = Enum<{ CannotReinitialize: [], DAOIsNotOpen: [], DAOMemberNotExisted: [], SenderIsNotOwner: [], IsNotVotesEnough: [], NotToEndDate: [], VotingIsNotStart: [], VotingHasEnded: [], ProposalIsNotActive: [], DAOIsNotActive: [], ProposalHasNotRecipient: [], IncorrectAssetId: ContractIdInput, DaoBalanceNotEnough: [], NotInWhitelistContributor: [] }>;
export type InvalidErrorOutput = Enum<{ CannotReinitialize: [], DAOIsNotOpen: [], DAOMemberNotExisted: [], SenderIsNotOwner: [], IsNotVotesEnough: [], NotToEndDate: [], VotingIsNotStart: [], VotingHasEnded: [], ProposalIsNotActive: [], DAOIsNotActive: [], ProposalHasNotRecipient: [], IncorrectAssetId: ContractIdOutput, DaoBalanceNotEnough: [], NotInWhitelistContributor: [] }>;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type DaoConfigInput = { quorum: BigNumberish, open: boolean, dao_type: BigNumberish };
export type DaoConfigOutput = { quorum: BN, open: boolean, dao_type: BN };
export type ProposalInput = { id: BigNumberish, owner: AddressInput, proposal_type: BigNumberish, status: BigNumberish, recipient: IdentityInput, amount: BigNumberish, start_date: BigNumberish, end_date: BigNumberish, created_date: BigNumberish, allow_early_execution: boolean, agree: BigNumberish, disagree: BigNumberish, executed: boolean };
export type ProposalOutput = { id: BN, owner: AddressOutput, proposal_type: BN, status: BN, recipient: IdentityOutput, amount: BN, start_date: BN, end_date: BN, created_date: BN, allow_early_execution: boolean, agree: BN, disagree: BN, executed: boolean };

interface DaoContractAbiInterface extends Interface {
  functions: {
    add_contributor_to_whitelist: FunctionFragment;
    add_member: FunctionFragment;
    create_proposal: FunctionFragment;
    execute_proposal: FunctionFragment;
    get_balance: FunctionFragment;
    get_count_member: FunctionFragment;
    get_count_proposal: FunctionFragment;
    get_dao_info: FunctionFragment;
    get_funds: FunctionFragment;
    get_members: FunctionFragment;
    get_proposal_by_id: FunctionFragment;
    get_proposals: FunctionFragment;
    get_user_vote: FunctionFragment;
    get_whitelist_contributors: FunctionFragment;
    initialize: FunctionFragment;
    is_member: FunctionFragment;
    join: FunctionFragment;
    leave: FunctionFragment;
    remove_contributor_from_whitelist: FunctionFragment;
    remove_member: FunctionFragment;
    send_fund: FunctionFragment;
    vote: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'add_contributor_to_whitelist', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'add_member', values: [AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'create_proposal', values: [BigNumberish, IdentityInput, BigNumberish, BigNumberish, BigNumberish, boolean]): Uint8Array;
  encodeFunctionData(functionFragment: 'execute_proposal', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_balance', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_count_member', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_count_proposal', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_dao_info', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_funds', values: [[IdentityInput, IdentityInput, IdentityInput, IdentityInput, IdentityInput]]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_members', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_proposal_by_id', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_proposals', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_user_vote', values: [AddressInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_whitelist_contributors', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: [DaoConfigInput, [AddressInput, AddressInput, AddressInput, AddressInput, AddressInput], [IdentityInput, IdentityInput, IdentityInput, IdentityInput, IdentityInput]]): Uint8Array;
  encodeFunctionData(functionFragment: 'is_member', values: [AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'join', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'leave', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'remove_contributor_from_whitelist', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'remove_member', values: [AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'send_fund', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'vote', values: [BigNumberish, boolean]): Uint8Array;

  decodeFunctionData(functionFragment: 'add_contributor_to_whitelist', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'add_member', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create_proposal', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'execute_proposal', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_count_member', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_count_proposal', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_dao_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_funds', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_members', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_proposal_by_id', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_proposals', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_user_vote', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_whitelist_contributors', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'is_member', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'join', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'leave', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'remove_contributor_from_whitelist', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'remove_member', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'send_fund', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'vote', data: BytesLike): DecodedValue;
}

export class DaoContractAbi extends Contract {
  interface: DaoContractAbiInterface;
  functions: {
    add_contributor_to_whitelist: InvokeFunction<[contributor: IdentityInput], void>;
    add_member: InvokeFunction<[new_member: AddressInput], void>;
    create_proposal: InvokeFunction<[proposal_type: BigNumberish, recipient: IdentityInput, amount: BigNumberish, start_date: BigNumberish, end_date: BigNumberish, allow_early_execution: boolean], BN>;
    execute_proposal: InvokeFunction<[proposal_id: BigNumberish], void>;
    get_balance: InvokeFunction<[], BN>;
    get_count_member: InvokeFunction<[], BN>;
    get_count_proposal: InvokeFunction<[], BN>;
    get_dao_info: InvokeFunction<[], [DaoConfigOutput, AddressOutput, BN, BN, BN, BN, BN]>;
    get_funds: InvokeFunction<[contributors: [IdentityInput, IdentityInput, IdentityInput, IdentityInput, IdentityInput]], [Option<BN>, Option<BN>, Option<BN>, Option<BN>, Option<BN>]>;
    get_members: InvokeFunction<[offset: BigNumberish], [Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>, Option<AddressOutput>]>;
    get_proposal_by_id: InvokeFunction<[proposal_id: BigNumberish], Option<ProposalOutput>>;
    get_proposals: InvokeFunction<[offset: BigNumberish], [Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>, Option<ProposalOutput>]>;
    get_user_vote: InvokeFunction<[address: AddressInput, proposal_id: BigNumberish], Option<boolean>>;
    get_whitelist_contributors: InvokeFunction<[offset: BigNumberish], [Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>, Option<IdentityOutput>]>;
    initialize: InvokeFunction<[config: DaoConfigInput, members: [AddressInput, AddressInput, AddressInput, AddressInput, AddressInput], whitelist_contributors: [IdentityInput, IdentityInput, IdentityInput, IdentityInput, IdentityInput]], void>;
    is_member: InvokeFunction<[member: AddressInput], boolean>;
    join: InvokeFunction<[], void>;
    leave: InvokeFunction<[], void>;
    remove_contributor_from_whitelist: InvokeFunction<[contributor: IdentityInput], void>;
    remove_member: InvokeFunction<[old_member: AddressInput], void>;
    send_fund: InvokeFunction<[], void>;
    vote: InvokeFunction<[proposal_id: BigNumberish, is_agree: boolean], void>;
  };
}
